{"version":3,"sources":["D:/GOIT/NetpeackTestTask/mini-blog/src/components/app-bar/D:/GOIT/NetpeackTestTask/mini-blog/src/components/app-bar/D:/GOIT/NetpeackTestTask/mini-blog/src/components/app-bar/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/app-bar/D:/GOIT/NetpeackTestTask/mini-blog/src/components/app-bar/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/panel/D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/panel/D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/panel/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/panel/D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/panel/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list-item/D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list-item/D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list-item/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list-item/D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list-item/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/message/D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/message/D:/GOIT/NetpeackTestTask/mini-blog/src/components/shared/message/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list/D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list/D:/GOIT/NetpeackTestTask/mini-blog/src/components/notes-list/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/comments/D:/GOIT/NetpeackTestTask/mini-blog/src/components/comments/D:/GOIT/NetpeackTestTask/mini-blog/src/components/comments/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/comments/D:/GOIT/NetpeackTestTask/mini-blog/src/components/comments/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/userInfo/D:/GOIT/NetpeackTestTask/mini-blog/src/components/userInfo/D:/GOIT/NetpeackTestTask/mini-blog/src/components/userInfo/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/userInfo/D:/GOIT/NetpeackTestTask/mini-blog/src/components/userInfo/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/note/D:/GOIT/NetpeackTestTask/mini-blog/src/components/note/D:/GOIT/NetpeackTestTask/mini-blog/src/components/note/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/note/D:/GOIT/NetpeackTestTask/mini-blog/src/components/note/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/components/app/D:/GOIT/NetpeackTestTask/mini-blog/src/components/app/D:/GOIT/NetpeackTestTask/mini-blog/src/components/app/styles.module.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_reset.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_fonts.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/index.scss","D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/D:/GOIT/NetpeackTestTask/mini-blog/src/styles/_var.scss"],"names":[],"mappings":"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","file":"main.1d5bc22d.chunk.css","sourcesContent":["@import '../../styles/var';\n\n.appBar {\n  box-sizing: border-box;\n  box-shadow: 0px 2px 5px 0px rgba(0,0,0,0.25);\n  display: flex;\n  justify-content: center;\n  padding: 0 15px;\n  width: 100%;\n}\n\n.contant_conteiner {\n  align-items: center;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  max-width: 1280px;\n  padding: 10px 0;\n  width: 100%;\n\n  a {\n    text-decoration: none;\n  }\n\n  @media screen and (min-width: 421px) {\n    flex-direction: row;\n    justify-content: space-between;\n    padding: 24px 15px;\n  }\n}\n\n.appTitle {\n  color: $text-color;\n  display: block;\n  line-height: 1;\n  margin-bottom: 25px;\n\n  &:hover {\n    color: $primary-color;\n  }\n\n  @media screen and (min-width: 421px) {\n    margin-bottom: 0;\n  }\n}\n\n.searchInput {\n  @include font-size($p2-font-sizes);\n  border: none;\n  border-bottom: 1px solid $text-color-transparent;\n  display: block;\n  line-height: 1.5;\n  max-width: 320px;\n}\n\n.searchInput:focus {\n  outline: none;\n}\n","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n","@import '../../../styles/var';\n\n.panel {\n  box-sizing: border-box;\n  -webkit-box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  -moz-box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  flex: 1;\n  margin: 8px 4px;\n  padding: 1em;\n  min-width: 90%;\n\n  @media screen and (min-width: 668px) {\n    min-width: 30%;\n  }\n}\n\n.title {\n  border-bottom: 1px solid $text-color-transparent;\n  color: $primary-color;\n  line-height: 1.3;\n  margin: 0;\n  padding-bottom: 10px;\n}\n\n.title::first-letter {\n  text-transform: uppercase;\n}","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n","@import '../../styles/var';\n\n.note {\n  padding: 5px;\n\n  a {\n    text-decoration: none;\n    color: $secondary-color;\n    cursor: pointer;\n\n    &:hover {\n      color: $primary-color;\n    }\n  }\n}\n\n.note_body {\n  padding: 16px 0;\n}\n\n.title {\n  border-bottom: 1px solid $text-color-transparent;\n  color: $primary-color;\n  line-height: 1.3;\n  margin: 0;\n  padding-bottom: 10px;\n}\n","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n",".message {\n  display: block;\n  text-align: center;\n  font-weight: bold;\n}",".list {\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  justify-content: space-between;\n}","@import '../../styles/var';\n\n.comment_wrapper {\n  display: flex;\n  flex-direction: column;\n  box-sizing: border-box;\n  -webkit-box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  -moz-box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  box-shadow: 0px 1px 5px 0px rgba(0,0,0,0.25);\n  margin: 8px 4px;\n  padding: 16px;\n\n  @media screen and (min-width: 421px) {\n    flex-direction: row;\n    justify-content: space-between;\n  }\n}\n\n.comments_title {\n  @include font-size($h5-font-sizes);\n  color: $primary-color;\n  margin: 0;\n}\n\n.list {\n  margin: 16px auto;\n}\n\n.comment_author {\n  @include font-size($h5-font-sizes);\n  color: $secondary-color;\n  margin-bottom: 8px;\n\n  @media screen and (min-width: 421px) {\n    border-right: 1px solid $text-color-transparent;\n    flex: 1 1 100px;\n    margin-right: 16px;\n  }\n}\n\n.comment_text {\n  @include font-size($p2-font-sizes);\n  display: inline-block;\n  color: $text-color;\n\n  @media screen and (min-width: 421px) {\n    flex: 3 1 200px;\n  }\n}","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n","@import '../../styles/var';\n\n.user_info_block {\n  margin-bottom: 16px;\n}\n\n.user_name {\n  @include font-size($h4-font-sizes);\n  color: $secondary-color;\n  margin: 0;\n}\n\n.user_info {\n  @include font-size($p2-font-sizes);\n  padding: 0;\n  margin: 0;\n  color: $text-color-transparent;\n}\n","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n","@import '../../styles/var';\n\n.note_container {\n  box-sizing: border-box;\n  margin: 0;\n  padding: 16px;\n  width: 100%;\n}\n\n.note_title {\n  @include font-size($h2-font-sizes);\n  color: $primary-color;\n  margin-bottom: 24px;\n}\n\n.note_body {\n  @include font-size($p1-font-sizes);\n  display: inline-block;\n  color: $text-color;\n}\n","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n",".app {\r\n  align-items: center;\r\n  background-color: rgb(255, 255, 255);\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  height: 100%;\r\n}\r\n\r\n.contant_container {\r\n  padding: 0;\r\n  margin: 0 auto;\r\n  max-width: 1280px;\r\n  width: 100%;\r\n  height: 100%;\r\n}","/* http://meyerweb.com/eric/tools/css/reset/ \n   v2.0 | 20110126\n   License: none (public domain)\n*/\n\nhtml, body, div, span, applet, object, iframe,\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\na, abbr, acronym, address, big, cite, code,\ndel, dfn, em, img, ins, kbd, q, s, samp,\nsmall, strike, strong, sub, sup, tt, var,\nb, u, i, center,\ndl, dt, dd, ol, ul, li,\nfieldset, form, label, legend,\ntable, caption, tbody, tfoot, thead, tr, th, td,\narticle, aside, canvas, details, embed, \nfigure, figcaption, footer, header, hgroup, \nmenu, nav, output, ruby, section, summary,\ntime, mark, audio, video {\n  margin: 0;\n  padding: 0;\n  border: 0;\n  font-size: 100%;\n  font: inherit;\n  vertical-align: baseline;\n}\n\n/* HTML5 display-role reset for older browsers */\narticle, aside, details, figcaption, figure, \nfooter, header, hgroup, menu, nav, section {\n  display: block;\n}\n\nbody {\n  line-height: 1;\n}\n\nol, ul {\n  list-style: none;\n}\n\nblockquote, q {\n  quotes: none;\n}\n\nblockquote:before, blockquote:after,\nq:before, q:after {\n  content: '';\n  content: none;\n}\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n","/* overpass-600 - latin-ext_latin */\n@font-face {\n  font-family: 'Roboto Bold';\n  font-style: normal;\n  font-weight: 600;\n  src: local('Roboto Bold'), local('Roboto-Bold'),\n    url('../fonts/roboto-v16-cyrillic-ext_latin-700.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n    url('../fonts/roboto-v16-cyrillic-ext_latin-700.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n}\n\n/* roboto-regular - latin-ext_latin */\n@font-face {\n  font-family: 'Roboto';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto'), local('Roboto'),\n    url('../fonts/roboto-v16-cyrillic-ext_latin-regular.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n    url('../fonts/roboto-v16-cyrillic-ext_latin-regular.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n}\n\n@font-face {\n  font-family: 'Roboto Light';\n  font-style: normal;\n  font-weight: 400;\n  src: local('Roboto Light'), local('Roboto-Light'),\n    url('../fonts/roboto-v16-cyrillic-ext_latin-300.woff2') format('woff2'), /* Chrome 26+, Opera 23+, Firefox 39+ */\n    url('../fonts/roboto-v16-cyrillic-ext_latin-300.woff') format('woff'); /* Chrome 6+, Firefox 3.6+, IE 9+, Safari 5.1+ */\n}\n","@import './reset';\n@import './fonts';\n@import './var';\n\nhtml {\n  height: 100%;\n}\n\nbody,\nmain {\n  @include font-size($p2-font-sizes);\n  box-sizing: border-box;\n  margin: 0;\n  padding: 0;\n  height: 100%;\n}\n\nh1 {\n  @include font-size($h1-font-sizes);\n}\n\nh2 {\n  @include font-size($h2-font-sizes);\n}\n\nh3 {\n  @include font-size($h3-font-sizes);\n}\n\nh4 {\n  @include font-size($h4-font-sizes);\n}\n\nh5 {\n  @include font-size($h5-font-sizes);\n}\n\np, ul, ol {\n  @include font-size($p2-font-sizes);\n}\n","// @import './fonts';\n\n// Typography:\n//fonts\n$title-font: 'Roboto Bold', sans-serif;\n$text-font: 'Roboto', sans-serif;\n$light-text-font: 'Roboto Light', sans-serif;\n\n//Font Sizes\n$breakpoints: (\n  small : 480px,\n  medium: 700px,\n  large : 1024px\n);\n//Fonts parameters: size, font-family, font-weight, line-height\n$h1-font-sizes: (\n  null  : (30px, $title-font, 600, 1),\n  medium: (42px, $title-font, 600, 1),\n  large : (50px, $title-font, 600, 1)\n);\n\n$h2-font-sizes: (\n  null  : (24px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (42px, $title-font, 600, 1)\n);\n\n$h3-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (26px, $title-font, 600, 1),\n  large : (26px, $title-font, 600, 1)\n);\n\n$h4-font-sizes: (\n  null  : (22px, $title-font, 600, 1),\n  medium: (22px, $title-font, 600, 1),\n  large : (22px, $title-font, 600, 1)\n);\n\n$h5-font-sizes: (\n  null  : (16px, $title-font, 600, 1),\n  medium: (18px, $title-font, 600, 1),\n  large : (18px, $title-font, 600, 1)\n);\n\n$p1-font-sizes: (\n  null  : (20px, $text-font, 400, 1),\n  medium: (20px, $text-font, 400, 1),\n  large : (20px, $text-font, 400, 1)\n);\n\n$p2-font-sizes: (\n  null  : (16px, $text-font, 400, 1),\n  medium: (16px, $text-font, 400, 1),\n  large : (16px, $text-font, 400, 1)\n);\n\n$p3-font-sizes: (\n  null  : (14px, $text-font, 400, 1),\n  medium: (14px, $text-font, 400, 1),\n  large : (14px, $text-font, 400, 1)\n);\n\n@mixin font-size($fs-map, $fs-breakpoints: $breakpoints) {\n  @each $fs-breakpoint, $fs-font-size in $fs-map {\n    @if $fs-breakpoint == null {\n      @include make-font-size($fs-font-size);\n    }\n    @else {\n      // If $fs-font-size is a key that exists in\n      // $fs-breakpoints, use the value\n      @if map-has-key($fs-breakpoints, $fs-breakpoint) {\n        $fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);\n      }\n      @media screen and (min-width: $fs-breakpoint) {\n        @include make-font-size($fs-font-size);\n      }\n    }\n  }\n}\n\n// Utility function for mixin font-size\n@mixin make-font-size($fs-font-size) {\n  // If $fs-font-size is a list, include\n  // both font-size and line-height\n  @if type-of($fs-font-size) == \"list\" {\n    font-size: nth($fs-font-size, 1);\n    @if (length($fs-font-size) > 1) {\n      font-family: nth($fs-font-size, 2);\n    }\n    @if (length($fs-font-size) > 2) {\n      font-weight: nth($fs-font-size, 3);\n    }\n    @if (length($fs-font-size) > 3) {\n      line-height: nth($fs-font-size, 4);\n    }\n  }\n  @else {\n    font-size: $fs-font-size;\n  }\n}\n\n// Colors\n$primary-color: #ef6c00;\n$secondary-color: #283593;\n$bg-color: #fff;\n$text-color: #424242;\n\n$primary-transparent: rgba(239,108,0,0.3);\n$secondary-color-transparent: rgba(40,53,147,0.3);\n$bg-color-transparent: rgba(255,255,255,0.3);\n$text-color-transparent: rgba(0,0,0,0.3);\n"]}